openapi: 3.0.1
info:
  title: Didomi Test
  version: 1.0.0
  contact:
    name: "Fabio Coutinho"
    email: "fabio.santcou@gmail.com"
    url: "https://portfolio-inky-six-97.vercel.app/"
servers:
  # - url: "https://test-verx-api.onrender.com/"
  #   description: "Production Server"
  - url: "http://localhost:3000"
    description: "Local Server"

paths:
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Get all
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UsersResponse"

    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUsersResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"

  /api/v1/users/{id}:
    delete:
      tags:
        - Users
      summary: Delete an user
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
  /api/v1/events:
    post:
      tags:
        - Events
      summary: Create a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEventsBody"
      responses:
        "201":
          description: A successful response
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"

components:
  schemas:
    ExceptionResponse:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
        statusCode:
          type: integer

    UsersResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        consents:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              enabled:
                type: boolean
    Consents:
      type: object
      properties:
        id:
          type: string
          enum: ["email_notifications", "sms_notifications"]
        enabled:
          type: boolean

    CreateUsersResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        consents:
          type: array
          example: []

    CreateEventsBody:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
        consents:
          type: array
          items:
            $ref: "#/components/schemas/Consents"
